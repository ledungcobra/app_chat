/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client.view;

import client.context.CApplicationContext;
import client.core.ResponseHandler;
import common.dto.Command;
import common.dto.CommandObject;
import lombok.EqualsAndHashCode;
import lombok.SneakyThrows;
import server.entities.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

import static client.context.CApplicationContext.tcpClient;

/**
 * @author ledun
 */
@EqualsAndHashCode(callSuper = false, onlyExplicitlyIncluded = true)
public class LoginScreen extends AbstractScreen implements ResponseHandler
{

    @EqualsAndHashCode.Include
    private int id = 0;


    public LoginScreen() throws HeadlessException
    {
        tcpClient.addListener(this);
    }

    @Override
    public void onCreateView()
    {
        initComponents();
        ImageIcon icon = new ImageIcon("loading.gif");
        this.loadingLbl.setIcon(icon);
//        this.loadingLbl.setText("loading ....");
        this.loadingLbl.setVisible(false);
    }

    @Override
    public void addEventListener()
    {
        this.loginBtn.addActionListener(this::loginBtnActionPerformed);
        this.registerBtn.addActionListener(this::registerActionPerformed);
    }

    private void registerActionPerformed(ActionEvent actionEvent)
    {

    }

    @SneakyThrows
    private void loginBtnActionPerformed(ActionEvent e)
    {
        loginAsync();
    }

    public void registerAsync()
    {
        CApplicationContext.service.submit(() -> {
            try
            {
                if (!tcpClient.stillAlive())
                {
                    tcpClient.connect();
                }

                User user = new User();
                user.setUserName(userNameTextField.getText());
                user.setPassword(new String(passwordTextField.getPassword()));

                tcpClient.sendRequestAsync(new CommandObject(Command.C2S_LOGIN, user));
            } catch (Exception e)
            {
                e.printStackTrace();
            }
        });

    }

    public void loginAsync()
    {
        CApplicationContext.service.submit(() -> {
            try
            {
                if (!tcpClient.stillAlive())
                {
                    tcpClient.connect();
                }

                User user = new User();
                user.setUserName(userNameTextField.getText());
                user.setPassword(new String(passwordTextField.getPassword()));

                tcpClient.sendRequestAsync(new CommandObject(Command.C2S_LOGIN, user));
            } catch (Exception e)
            {
                e.printStackTrace();
            }
        });

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        userNameTextField = new JTextField();
        passwordTextField = new JPasswordField();
        loginBtn = new JButton();
        jCheckBox1 = new JCheckBox();
        registerBtn = new JButton();
        loadingLbl = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("Quick Chat");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        loginBtn.setText("Login");

        jCheckBox1.setText("Remember me");

        registerBtn.setText("Register");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 330, Short.MAX_VALUE)
                                                .addComponent(registerBtn)
                                                .addGap(47, 47, 47)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jCheckBox1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(loginBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(32, 32, 32)
                                                .addComponent(loadingLbl)
                                                .addGap(198, 198, 198))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel3))
                                                .addGap(27, 27, 27)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(passwordTextField)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addComponent(userNameTextField))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(userNameTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(passwordTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox1)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(loginBtn)
                                        .addComponent(registerBtn)
                                        .addComponent(loadingLbl))
                                .addContainerGap(98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox jCheckBox1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel loadingLbl;
    private JButton loginBtn;
    private JPasswordField passwordTextField;
    private JButton registerBtn;
    private JTextField userNameTextField;

    @Override
    public void listen(CommandObject commandObject)
    {
        if (commandObject.getCommand().equals(Command.S2C_EXIT))
        {
            runOnUiThread(() -> JOptionPane.showMessageDialog(this, "Receive exit signal"));
            closeHandler();
        } else if (commandObject.getCommand().equals(Command.S2C_LOGIN_NACK))
        {
            runOnUiThread(() -> JOptionPane.showMessageDialog(this, "Login fail"));
            tcpClient.sendRequestAsync(new CommandObject(Command.C2S_EXIT));

        } else if (commandObject.getCommand().equals(Command.S2C_LOGIN_ACK))
        {
            runOnUiThread(() -> JOptionPane.showMessageDialog(this, "Login success"));
        } else if (commandObject.getCommand().equals(Command.S2C_REGISTER_ACK))
        {
            runOnUiThread(() -> JOptionPane.showMessageDialog(this, "Register success"));
            System.out.println(commandObject.getPayload());
        } else if (commandObject.getCommand().equals(Command.S2C_REGISTER_NACK))
        {
            runOnUiThread(() -> JOptionPane.showMessageDialog(this, "Register success fail" + commandObject.getPayload()));
        }
    }

    @Override
    public void closeHandler()
    {
        tcpClient.closeHandler(this);
    }


    // End of variables declaration//GEN-END:variables
}
